REM lz4Utils - LZ4 related routines
DEF FNlz4Utils
[ OPT bassPass%

 dcd 0
 dcd 0
 dcd 0
 dcd 0
.lz4UtilsStack ; stack goes upward

; LZ4 decompression routine ported to ARM2 by grz-
; credits -> community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/lz4-decompression-routine-for-cortex-m0-and-later
; make sure to remove compressed data header if you use a compression tool
; commented lines is original version
; r0 = address of the compressed data
; r1 = RAM address of the decompressed data
; r4,r5,r6 = preserved
.lz4UtilsUnlz
 ;ldrh r2,[r0] ; get length of compressed data
 ldr r2,[r0]
 mov r2,r2, ROR #16
 mov r2,r2, LSR #16
 adds r0,r0,#2 ; advance source pointer

 ;push {r4-r6,lr} ;save r4, r5, r6 and return-address
.lz4UtilsLen
 adr r13,lz4UtilsStack
 stmfd r13!,{r4-r6,r14}
 adds r5,r2,r0 ; point r5 to end of compressed data
.lz4UtilsGetToken
 ldrb r6,[r0] ; get token
 adds r0,r0,#1 ; advance source pointer
 ;lsrs r4,r6,#4 ; get literal length, keep token in r6
 movs r4,r6, LSR #4
 beq lz4UtilsGetOffset ; jump forward if there are no literals
 bl lz4UtilsGetLength ; get length of literals
 movs r2,r0 ; point r2 to literals
 bl lz4UtilsCopyData ; copy literals (r2=src, r1=dst, r4=len)
 movs r0,r2 ; update source pointer
.lz4UtilsGetOffset
 cmp r0,r5
 bge lz4UtilsBye
 ldrb r3,[r0,#0] ; get match offset's low byte
 subs r2,r1,r3 ; subtract from destination; this will become the match position
 ldrb r3,[r0,#1] ; get match offset's high byte
 ;lsls r3,r3,#8 ; shift to high byte
 movs r3,r3, LSL #8
 subs r2,r2,r3 ; subtract from match position
 adds r0,r0,#2 ; advance source pointer
 ;lsls r4,r6,#28 ; get rid of token's high 28 bits
 movs r4,r6, LSL #28
 ;lsrs r4,r4,#28 ; move the 4 low bits back where they were
 movs r4,r4, LSR #28
 bl lz4UtilsGetLength ; get length of match data
 adds r4,r4,#4 ; minimum match length is 4 bytes
 bl lz4UtilsCopyData ; copy match data (r2=src, r1=dst, r4=len)
 cmp r0,r5 ; check if we've reached the end of the compressed data
 blt lz4UtilsGetToken ; if not, go get the next token
 ;pop {r4-r6,pc} ; restore r4, r5 and r6, then return
 ldmfd r13!,{r4-r6,r15}

.lz4UtilsGetLength
 cmp r4,#15 ; if length is 15, then more length info follows
 bne lz4UtilsGotLength ; jump forward if we have the complete length
.lz4UtilsGetLengthLoop
 ldrb r3,[r0] ; read another byte
 adds r0,r0,#1 ; advance source pointer
 adds r4,r4,r3 ; add byte to length
 cmp r3,#255 ; check if end reached
 beq lz4UtilsGetLengthLoop ; if not, go round loop
.lz4UtilsGotLength
 ;bx lr
 mov r15,r14 ; return
.lz4UtilsCopyData
 rsbs r4,r4,#0 ; index = -length
 subs r2,r2,r4 ; point to end of source
 subs r1,r1,r4 ; point to end of destination
.lz4UtilsCopyDataLoop
 ldrb r3,[r2,r4] ; read byte from source_end[-index]
 strb r3,[r1,r4] ; store byte in destination_end[-index]
 adds r4,r4,#1 ; increment index
 bne lz4UtilsCopyDataLoop ; keep going until index wraps to 0
 ;bx lr ; return
 mov r15,r14
.lz4UtilsBye
 ldmfd r13!,{r4-r6,pc}
]
=0
